SHOW DATABASES;
CREATE DATABASE Online_shop; 
USE Online_shop;
CREATE TABLE users (
user_id INT AUTO_INCREMENT,
user_first_name VARCHAR(50) NOT NULL,
user_last_name VARCHAR(50) NOT NULL,
user_email_address VARCHAR(50) NOT NULL,
user_address VARCHAR(50) NOT NULL,
PRIMARY KEY(user_id)
);

SELECT * FROM users;

CREATE TABLE orders (
order_id INT AUTO_INCREMENT,
fk_user_id INT NOT NULL,
order_date DATE NOT NULL,
order_status VARCHAR(50) NOT NULL,
order_value DEC(6,2) NOT NULL,
shipping_address VARCHAR(100) NOT NULL,
PRIMARY KEY(order_id),
FOREIGN KEY(fk_user_id) REFERENCES users(user_id)
);

SELECT * FROM orders;

CREATE TABLE products (
product_id INT AUTO_INCREMENT,
product_name VARCHAR (100) NOT NULL,
product_desc VARCHAR (100) NOT NULL,
product_genre VARCHAR (100) NOT NULL,
product_price DEC (6,2) NOT NULL,
PRIMARY KEY (product_id)
);

SELECT * FROM products;

CREATE TABLE orderline (
orderline_id INT AUTO_INCREMENT,
fk_order_id INT NOT NULL,
fk_product_id INT NOT NULL,
quantity INT NOT NULL,
PRIMARY KEY(orderline_id),
FOREIGN KEY(fk_order_id) REFERENCES orders (order_id),
FOREIGN KEY(fk_product_id) REFERENCES products (product_id)
);

SHOW TABLES;

INSERT INTO users (user_first_name, user_last_name, user_email_address, user_address) VALUES ("John", "Doe", "something@me.com", "Monaco");
INSERT INTO users (user_first_name, user_last_name, user_email_address, user_address) VALUES ("Jane", "Bloggs", "word@me.com", "Madrid");
INSERT INTO users (user_first_name, user_last_name, user_email_address, user_address) VALUES ("Prince", "Harry", "royal@me.com", "London");
INSERT INTO users (user_first_name, user_last_name, user_email_address, user_address) VALUES ("Meaghan", "Markle", "princess@me.com", "London");
INSERT INTO users (user_first_name, user_last_name, user_email_address, user_address) VALUES ("Snoop", "Dogg", "dog@me.com", "Los Angeles");
INSERT INTO users (user_first_name, user_last_name, user_email_address, user_address) VALUES ("Taylor", "Swift", "taylor@me.com", "New York");
INSERT INTO users (user_first_name, user_last_name, user_email_address, user_address) VALUES ("John", "Snow", "john@me.com", "London");
INSERT INTO users (user_first_name, user_last_name, user_email_address, user_address) VALUES ("Mister", "Motivator", "mm@me.com", "Glasgow");
INSERT INTO users (user_first_name, user_last_name, user_email_address, user_address) VALUES ("Kai", "Humphries", "kai@me.com", "Glasgow");
INSERT INTO users (user_first_name, user_last_name, user_email_address, user_address) VALUES ("Natalie", "Humphries", "nadz@me.com", "Glasgow");

SELECT * FROM users;

INSERT INTO products (product_name, product_desc, product_genre, product_price) VALUES ("Iphone", "Overpriced phone", "Electronics", 600);
INSERT INTO products (product_name, product_desc, product_genre, product_price) VALUES ("Samsung Phone", "Reliable phone", "Electronics", 400.00);
INSERT INTO products (product_name, product_desc, product_genre, product_price) VALUES ("Coffee Cup", "An essential for tea", "Homeware", 5.99);
INSERT INTO products (product_name, product_desc, product_genre, product_price) VALUES ("Woolly Rug", "Perfect for cold floors", "Homeware", 20.00);
INSERT INTO products (product_name, product_desc, product_genre, product_price) VALUES ("Handcream", "For soft hands", "Cosmetics", 5.99);
INSERT INTO products (product_name, product_desc, product_genre, product_price) VALUES ("Make-up Wipes", "For dirty faces", "Cosmetics", 3.00);

SELECT * FROM products;

INSERT INTO orders (fk_user_id, order_date, order_status, order_value, shipping_address) VALUES (1, "2020-01-01", "ORDERED", 100, "Monaco");
INSERT INTO orders (fk_user_id, order_date, order_status, order_value, shipping_address) VALUES (2, "2021-01-03", "SHIPPED", 50, "London");
INSERT INTO orders (fk_user_id, order_date, order_status, order_value, shipping_address) VALUES (3, "2022-01-04", "CANCELLED", 35, "Los Angeles");
INSERT INTO orders (fk_user_id, order_date, order_status, order_value, shipping_address) VALUES (2, "2022-02-01", "SHIPPED", 45, "Glasgow");
INSERT INTO orders (fk_user_id, order_date, order_status, order_value, shipping_address) VALUES (8, "2022-01-01", "SHIPPED", 1000, "New York");
INSERT INTO orders (fk_user_id, order_date, order_status, order_value, shipping_address) VALUES (6, "2022-02-01", "ORDERED", 67, "Madrid");

SELECT * FROM orders;

INSERT INTO orderline (fk_order_id, fk_product_id, quantity) VALUES (1, 3, 4);
INSERT INTO orderline (fk_order_id, fk_product_id, quantity) VALUES (1, 2, 2);
INSERT INTO orderline (fk_order_id, fk_product_id, quantity) VALUES (2, 4, 1);
INSERT INTO orderline (fk_order_id, fk_product_id, quantity) VALUES (2, 5, 2);
INSERT INTO orderline (fk_order_id, fk_product_id, quantity) VALUES (2, 6, 1);
INSERT INTO orderline (fk_order_id, fk_product_id, quantity) VALUES (3, 1, 1);
INSERT INTO orderline (fk_order_id, fk_product_id, quantity) VALUES (4, 2, 3);
INSERT INTO orderline (fk_order_id, fk_product_id, quantity) VALUES (5, 3, 2);
INSERT INTO orderline (fk_order_id, fk_product_id, quantity) VALUES (6, 4, 2);
INSERT INTO orderline (fk_order_id, fk_product_id, quantity) VALUES (6, 5, 1);

SELECT * FROM orderline;

-- UPDATE TABLES EXERCISES

UPDATE users 
SET user_address = "L.A"
WHERE user_address = "Los Angeles";
SET SQL_SAFE_UPDATES=0;

UPDATE products
SET product_price = 6.99
WHERE product_price = 5.99;

UPDATE orders
SET order_status = "REFUNDED"
WHERE order_status = "CANCELLED";

UPDATE orderline
SET quantity = 4
WHERE quantity = 3;

SELECT *
FROM users u
JOIN orders o
ON u.user_id=fk_user_id
JOIN orderline ol
ON o.order_id=ol.fk_order_id
JOIN products p
ON ol.fk_product_id=p.product_id;

-- WHAT IS THE TOP SELLING PRODUCT? Coffee Cup and Samsung Phone - both with 6 sales
SELECT
p.product_name, ol.quantity,
SUM(ol.quantity)
FROM products p
JOIN orderline ol
ON p.product_id = ol.fk_product_id
GROUP BY p.product_name
ORDER BY ol.quantity DESC;

-- WHERE IS ORDER 2 BEING SHIPPED TO? London

SELECT shipping_address
FROM orders
WHERE order_id = 2;

-- What products are in order 3? Iphone
SELECT p.product_name, o.order_id
FROM orders o
JOIN orderline ol
ON o.order_id=ol.fk_order_id
JOIN products p
ON p.product_id=fk_product_id
WHERE o.order_id = 3;

-- How many orders has Jane Bloggs made? 2
SELECT
COUNT(o.order_id)
FROM users u
JOIN orders o
ON u.user_id = o.fk_user_id
WHERE u.user_first_name = "Jane" AND u.user_last_name = "Bloggs";

-- How many users have not ordered anything? 5

SELECT
COUNT(u.user_id)
FROM users u
LEFT OUTER JOIN orders o
ON u.user_id = o.fk_user_id
WHERE o.order_id IS NULL;

-- How many orders have been shipped? 3

SELECT 
COUNT(order_status)
FROM orders
WHERE order_status = "SHIPPED";

-- What orderline IDs are at ordered status? orderline_id - 1,2,9,10
-- How many orders is that? 2 (before deleting the records)
SELECT o.order_id,
COUNT( DISTINCT o.order_id)
FROM orders o
JOIN orderline ol
ON o.order_id = ol.fk_order_id
WHERE order_status = "ORDERED";

-- What does order 5 consist of and what is the total value? 2 coffee cups and Â£1000

SELECT o.order_id, p.product_name, ol.quantity, o.order_value
FROM orders o
JOIN orderline ol
ON o.order_id = ol.fk_order_id
JOIN products p
ON p.product_id=ol.fk_product_id
WHERE o.order_id = 5;

-- What does order 6 consist of and who ordered it? 2 Woolly Rugs, 1 Handcream and ordered by Taylor Swift

SELECT o.order_id, p.product_name, ol.quantity, o.order_value, u.user_first_name, u.user_last_name
FROM users u
JOIN orders o
ON u.user_id = o.fk_user_id
JOIN orderline ol
ON o.order_id = ol.fk_order_id
JOIN products p
ON p.product_id=ol.fk_product_id
WHERE o.order_id = 6;

-- Deleting records from each table 

DELETE FROM orderline WHERE orderline_id = 9;
DELETE FROM orders WHERE order_id = 6;
DELETE FROM orderline WHERE orderline_id = 4;

DELETE FROM products WHERE product_id = 5;
DELETE FROM users WHERE user_id = 10;
